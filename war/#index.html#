<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<!-- Le styles -->
<link href="bootstrap/css/bootstrap.css" rel="stylesheet">
<style type="text/css">
body {
	padding-top: 60px;
	padding-bottom: 40px;
}
.sidebar-nav {
	padding: 9px 0;
}
</style>
<link href="bootstrap/css/bootstrap-responsive.css" rel="stylesheet">
<!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<link href="codemirror/codemirror.css" rel="stylesheet">
<title>Vizion</title>
</head>
<body>
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container-fluid">
          <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="#">Project name</a>
          <div class="btn-group pull-right">
            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
              <i class="icon-user"></i> Username
              <span class="caret"></span>
            </a>
            <ul class="dropdown-menu">
              <li><a href="#">Profile</a></li>
              <li class="divider"></li>
              <li><a href="#">Sign Out</a></li>
            </ul>
          </div>
          <div class="nav-collapse">
            <ul class="nav">
              <li class="active"><a href="#">Home</a></li>
              <li><a href="#about">About</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </div>
      </div>
    </div>

    <div class="container">
      <div class="row">
        <div class="span">
          <input type="file" id="fileSelector" name="file"/>
          <button id="loadShaderButton" disabled onclick="loadShader();">Load</button>

<textarea id="fragmentShader" style="width: 100%; height: 40ex;">
varying highp vec2 uv;
uniform sampler2D t;
uniform highp vec2 duv;

highp float luma(highp vec2 pos) {
  return dot(texture2D(t, pos).rgb, vec3(0.2126, 0.7152, 0.0722));
}

highp vec4 pix(highp float val) {
  return vec4(val, val, val, 1);
}

highp float diff(highp vec2 pos, highp vec2 dpos) {
  return luma(pos + dpos) - luma(uv - dpos);
}

highp float grad(highp vec2 pos, highp vec2 dpos) {
  return pow(diff(pos, vec2(dpos.x, 0)), 2.0) + pow(diff(pos, vec2(0, dpos.y)), 2.0);
}

void main() {
  gl_FragColor = pix(grad(uv, duv));
}
</textarea>
</div>
<div class="span4" id="node1"></div>
</div>
<div class="row">
<div id="videoContainer" class="span4" style="text-align: center;"></div>
<div id="canvasContainer" class="span4" style="text-align: center;"></div>
</div>
</div>
</body>
<script src="jquery/jquery-1.7.2.min.js" type="text/javascript"></script>
<script src="bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
<script src="webgl-utils.js" type="text/javascript"></script>
<script src="vizion.js" type="text/javascript"></script>
<script src="codemirror/codemirror-compressed.js" type="text/javascript"></script>
<script src="codemirror/glsl.js" type="text/javascript"></script>
<script src="dustjs/dust-core-0.3.0.min.js" type="text/javascript"></script>
<script src="dustjs-templates/fields.js" type="text/javascript"></script>
<script src="dustjs-templates/codemirror.js" type="text/javascript"></script>
<script type="text/javascript">
  
  var vizion = new Vizion();
  var video = vizion.addVideoElement("videoContainer", 320, 240);

  var canvas = vizion.addCanvasElement("canvasContainer", 320, 240);
  
  //Get A WebGL context
  var gl = WebGLUtils.setupWebGL(canvas);
  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  
  var vs = new VertexShader(gl,
                            "attribute vec2 xy;\n" +
                            "varying highp vec2 uv;\n" +
                            "\n" +
                            "void main() {\n" +
                            "  gl_Position = vec4(xy, 0, 1);\n" +
                            "  uv = 0.5 * (xy + 1.0);\n" +
                            "}\n");
  var fs = new FragmentShader(gl);
  var prog = new Program(gl, vs, fs);
  
  var texture = gl.createTexture();
  var loaded = false;
  video.onload = function() {
	try {
		  gl.activeTexture(gl.TEXTURE0);
			gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
			gl.bindTexture(gl.TEXTURE_2D, texture);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
			loaded = true;
		} catch (e) {
			console.log(e);
		}
	}
	vizion.getVideoURL(function(url) {
		console.log("Got url " + url);
		video.src = url;
		loaded = true;
	}, Vizion.logError);

  var positionLocation = null;
  var program = null;

  // setup GLSL program
  var codeMirror;
  function updateShaders() {
    var rowToLogs = {};
    try {
      fs.setText(codeMirror.getValue());
      prog.use();

      var positionLocation = gl.getAttribLocation(prog.id, "xy");
      gl.uniform1i(gl.getUniformLocation(prog.id, "t"), 0);
      gl.uniform2f(gl.getUniformLocation(prog.id, "duv"), 1.0 / 320, 1.0 / 240);
    } catch (e) {
      if ((typeof (e) == "object") && (e instanceof ShaderCompileException)) {
        for ( var logIndex = 0; logIndex < e.logs.length; logIndex++) {
          var log = e.logs[logIndex];
          if (rowToLogs[log.row] == null) {
            rowToLogs[log.row] = [];
          }
          rowToLogs[log.row].push(log);
        }
      } else {
        throw e;
      }
    }
    codeMirror.operation(function() {
      for (var lineIndex = 0; lineIndex < codeMirror.lineCount(); lineIndex++) {
        codeMirror.clearMarker(lineIndex);
      }
      for (var row in rowToLogs) {
        dust.render("marker", {logs: rowToLogs[row]}, function(err, out) {if (err) {console.error(err);} codeMirror.setMarker(row - 1, out);});
      }
    });
  }
  function paceFunction(func, pace) {
    var timeout = null;
    return function() {
      if (timeout != null) {
        clearTimeout(timeout);
      }
      var otherThis = this;
      timeout = setTimeout(function() {
        func.apply(otherThis);
        timeout = null;
      }, pace);
    }
  }
  codeMirror = CodeMirror.fromTextArea(document.getElementById("fragmentShader"), {mode: "x-shader/x-fragment", lineNumbers: true, matchBrackets: true, onChange: paceFunction(updateShaders, 500)});
  updateShaders();

  var fileSelector = document.getElementById("fileSelector");
  var loadShaderButton = document.getElementById("loadShaderButton");
  var saveShaderButton = document.getElementById("saveShaderButton");
  fileSelector.addEventListener('change', function() {
    var disabled = (fileSelector.files.length == 0);
    loadShaderButton.disabled = disabled;
    saveShaderButton.disabled = disabled;
  }, false);
  function loadShader() {
    var file = fileSelector.files[0];
    var reader = new FileReader();
    reader.onload = function() {
      codeMirror.setValue(reader.result);
    };
    reader.readAsText(file);
  }
  function saveShader() {
    var file = fileSelector.files[0];    
    window.saveAs(new Blob([codeMirror.getValue()], {type: 'text/plain'}), file.name);
/*  file.createWriter(function(writer) {
      writer.onwriteend = function(e) {
        alert("Saved successfully");
      };
      writer.onerror = function(e) {
        alert("Failed to save: " + e.toString());
      };
      writer.write(new Blob([codeMirror.getValue()], {type: 'text/plain'}));
    });*/
  }



  // look up where the vertex data needs to go.
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Create a buffer and put a single clipspace rectangle in
  // it (2 triangles)
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ -1.0, -1.0, 1.0, -1.0,
      -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0 ]), gl.STATIC_DRAW);
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

  function render() {
    //		gl.clear(gl.COLOR_BUFFER_BIT);
    gl.drawArrays(gl.TRIANGLES, 0, 6);

    if (loaded)
      video.onload();

    // request render to be called for the next frame.
    window.webkitRequestAnimationFrame(render, canvas);
  }

  window.onload = render;
  
  
  
  function createHTML(inputs) {
    var html = ' ';
    for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {
      var input = inputs[inputIndex];
      dust.render("label", {input: input}, function (err, out) {html += out});
      var value = prog.getUniformValue(input);
      for (var arrayIndex = 0; arrayIndex < input.size; arrayIndex++) {
        dust.render("float_vec2", {input: input, index: arrayIndex, value: (input.size == 1) ? value : value[arrayIndex]}, function (err, out) {if (err) {console.error(err);} html += out;});
      }
    }
    return html;
  }

  document.getElementById("node1").innerHTML = createHTML(prog.uniforms);


</script>
</html>
